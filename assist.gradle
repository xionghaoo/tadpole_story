
interface AssistPluginExtension {
    Property<String> getDev()
    Property<String> getPre()
    Property<String> getProd()
}

/**
 * 辅助插件
 * 1. 对输出文件按时间和版本重命名
 * 命名规则：{flavor}[Debug|Release]_v{VERSION_NAME}_{TIME}{SUFFIX}_{VERSION_CODE}.apk
 */
abstract class AssistPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        def extension = project.extensions.create('assist', AssistPluginExtension)
        // 对ApplicationVariantImpl所有项目进行配置
        project.android.applicationVariants.all { variant ->
            // 对ApkVariantOutputImpl进行设置，只循环一次
            variant.outputs.all { apk ->
                // 执行flavor对应的环境，如果没有指定，那么使用默认值
                String prod = extension.prod.getOrNull()
                String pre = extension.pre.getOrNull()
                String dev = extension.dev.getOrNull()
                if (prod == null) prod = "prod"
                if (pre == null) pre = "pre"
                if (dev == null) dev = "dev"

                def today = new Date().format('yyMMdd').toString()
                def names = apk.variantOutput.baseName.split('-')
                def flavor = names[0]
                if (flavor != prod) {
                    def suffix = calcSuffix(project, today, "./${flavor}/${names[1]}", "${dev}|${pre}")
                    // 重命名输出的apk文件，对测试环境和预发布环境apk文件自动命名
                    // e.g: uatRelease_v1.0.0_20200101a_1.apk
                    apk.outputFileName = "${variant.name}_v${variant.versionName}_${today}${suffix}_${variant.versionCode}.apk"
                } else {
                    // 正式环境
                    apk.outputFileName = "${variant.name}_v${variant.versionName}_${variant.versionCode}.apk"
                }
                print("output apk file name: ${apk.outputFileName}\n\n")
            }
        }
    }

    // 计算最后一个字符
    // apk输出目录今天的版本后缀+1，字母递增
    static def calcSuffix(Project project, String today, String path, String flavors) {
        def fileNames = project.fileTree(path).filter { it.name.contains('.apk') }.files.name
        def lastChars = []
        fileNames.forEach { name ->
            def matcher = name =~ /_[${flavors}]*([0-9]+[a-z])_/
            if (matcher.find()) {
                def fileDate = matcher.findAll().first()[1]
                if (fileDate.contains(today)) {
                    // 列出今天创建的文件
                    def dateMatcher = fileDate =~ /[\d]+([a-z])/
                    def lastChar = dateMatcher.findAll().first()[1]
                    lastChars << (int) (lastChar.charAt(0))
                }
            }
        }
        if (lastChars.size() > 0) {
            return (char) (lastChars.max() + 1)
        } else {
            return 'a'
        }
    }
}

apply plugin: AssistPlugin
